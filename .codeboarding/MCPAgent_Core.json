{
  "description": "The mcp-use project's core subsystem is centered around the MCPAgent, an intelligent orchestrator that leverages Large Language Models (LLMs) to interact with various MCP (Multi-Cloud Platform) services. The MCPAgent utilizes an LLM Integration Layer for its reasoning and decision-making, enabling it to interpret user requests and execute actions. It connects to MCP services through the MCPClient, which in turn manages Connectors for specific communication protocols. To ensure compatibility with the LLM framework, the LangChainAdapter translates MCP-specific tools into a standardized format. An optional ServerManager can dynamically discover and provision tools, enhancing the agent's capabilities. The MCPAgent maintains conversational context through its Conversation Memory and dynamically constructs its operational guidelines using the System Prompt Builder. This architecture allows the MCPAgent to provide a flexible and powerful interface for interacting with diverse MCP tools and services.",
  "components": [
    {
      "name": "MCPAgent",
      "description": "The central orchestrator, responsible for interpreting user requests, planning actions, interacting with tools, managing conversation flow, and formulating responses. It leverages LLMs for reasoning and integrates various components to achieve its goals.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.agents.mcpagent.MCPAgent",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/agents/mcpagent.py",
          "reference_start_line": 48,
          "reference_end_line": 1107
        }
      ],
      "assigned_files": [
        "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/agents/mcpagent.py",
        "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/agents/__init__.py",
        "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/agents/base.py",
        "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/agents/remote.py"
      ],
      "can_expand": true
    },
    {
      "name": "LLM Integration Layer",
      "description": "This component encapsulates the interaction with Large Language Models. It includes the BaseLanguageModel (e.g., OpenAI, Anthropic, Groq) used by MCPAgent and the LangChain AgentExecutor and create_tool_calling_agent which facilitate the LLM's reasoning and tool-calling capabilities.",
      "referenced_source_code": [
        {
          "qualified_name": "langchain_core.language_models.base.BaseLanguageModel",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "langchain.agents.agent_executor.AgentExecutor",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "langchain.agents.tool_calling_agent.create_tool_calling_agent",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [],
      "can_expand": true
    },
    {
      "name": "MCPClient",
      "description": "Manages the creation, retrieval, and closure of multiple sessions with various MCP servers/connectors. It provides a high-level interface for connection management and tool aggregation from these sessions.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.client.MCPClient",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/client.py",
          "reference_start_line": 21,
          "reference_end_line": 326
        }
      ],
      "assigned_files": [
        "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/client.py"
      ],
      "can_expand": true
    },
    {
      "name": "Connectors",
      "description": "Implement the concrete communication protocols (e.g., HTTP, WebSocket, Sandbox) for interacting with individual MCP servers. They handle low-level request/response mechanisms and resource management for specific server types.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.connectors.base.BaseConnector",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/connectors/base.py",
          "reference_start_line": 37,
          "reference_end_line": 453
        }
      ],
      "assigned_files": [
        "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/connectors/base.py"
      ],
      "can_expand": true
    },
    {
      "name": "LangChainAdapter",
      "description": "Translates between the MCP's internal tool and resource formats and the LangChain framework's BaseTool format, ensuring compatibility and a unified interface for the MCPAgent to interact with diverse MCP tools.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.adapters.langchain_adapter.LangChainAdapter",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/adapters/langchain_adapter.py",
          "reference_start_line": 29,
          "reference_end_line": 268
        },
        {
          "qualified_name": "langchain_core.tools.base.BaseTool",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/adapters/langchain_adapter.py"
      ],
      "can_expand": true
    },
    {
      "name": "ServerManager",
      "description": "When enabled, dynamically discovers and provisions available MCP servers and their associated tools, including management tools like ListServersTool. It provides a layer of abstraction for tool discovery.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.managers.server_manager.ServerManager",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/managers/server_manager.py",
          "reference_start_line": 11,
          "reference_end_line": 124
        }
      ],
      "assigned_files": [
        "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/managers/server_manager.py"
      ],
      "can_expand": true
    },
    {
      "name": "Conversation Memory",
      "description": "Managed internally by MCPAgent through _conversation_history (a list of BaseMessage objects). It stores the ongoing dialogue, including system messages, human queries, and AI responses, to provide context for subsequent interactions.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.agents.mcpagent.MCPAgent._conversation_history",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/agents/mcpagent.py",
          "reference_start_line": null,
          "reference_end_line": null
        },
        {
          "qualified_name": "langchain_core.messages.base.BaseMessage",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/",
          "reference_start_line": null,
          "reference_end_line": null
        }
      ],
      "assigned_files": [
        "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/agents/mcpagent.py"
      ],
      "can_expand": false
    },
    {
      "name": "System Prompt Builder",
      "description": "An external utility (create_system_message function) used by MCPAgent to dynamically construct the agent's system prompt based on available tools, user-provided instructions, and server manager mode.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.agents.prompts.system_prompt_builder.create_system_message",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/agents/prompts/system_prompt_builder.py",
          "reference_start_line": 59,
          "reference_end_line": 103
        }
      ],
      "assigned_files": [
        "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/agents/prompts/system_prompt_builder.py"
      ],
      "can_expand": false
    },
    {
      "name": "Unclassified",
      "description": "Component for all unclassified files and utility functions (Utility functions/External Libraries/Dependencies)",
      "referenced_source_code": [],
      "assigned_files": [],
      "can_expand": false
    }
  ],
  "components_relations": [
    {
      "relation": "uses",
      "src_name": "MCPAgent",
      "dst_name": "LLM Integration Layer"
    },
    {
      "relation": "configures",
      "src_name": "MCPAgent",
      "dst_name": "MCPClient"
    },
    {
      "relation": "provides to",
      "src_name": "MCPAgent",
      "dst_name": "ServerManager"
    },
    {
      "relation": "calls",
      "src_name": "MCPAgent",
      "dst_name": "System Prompt Builder"
    },
    {
      "relation": "manages",
      "src_name": "MCPAgent",
      "dst_name": "Conversation Memory"
    },
    {
      "relation": "uses",
      "src_name": "MCPClient",
      "dst_name": "Connectors"
    },
    {
      "relation": "provides tools to",
      "src_name": "LangChainAdapter",
      "dst_name": "MCPAgent"
    },
    {
      "relation": "provides tools to",
      "src_name": "ServerManager",
      "dst_name": "MCPAgent"
    }
  ]
}
