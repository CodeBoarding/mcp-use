{
  "description": "The MCPAgent serves as the central control unit for the LLM agent, managing its lifecycle and interactions. A key aspect of its operation involves dynamically configuring the LLM's context through a system prompt. This is achieved by calling the `create_system_message` function, which acts as the `SystemPromptConstructor`. This function gathers tool descriptions, templates, and other contextual information to build a tailored system prompt. The `MCPAgent` then utilizes this constructed system prompt to initialize and guide its internal `AgentExecutor`, which is responsible for executing the LLM's reasoning and tool interactions. This clear separation of concerns ensures that prompt generation is modular and the `MCPAgent` remains focused on orchestration.",
  "components": [
    {
      "name": "MCPAgent",
      "description": "The MCPAgent is the core orchestrator of the LLM agent's lifecycle and execution. It manages the entire interaction flow, from processing user queries and maintaining conversation history to orchestrating LLM reasoning, selecting appropriate tools, and generating responses. It acts as the central decision-making unit, leveraging the `create_system_message` function to configure its LLM context and interacting with external layers for LLM execution and tool management.",
      "referenced_source_code": [
        {
          "qualified_name": "MCPAgent",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/agents/mcpagent.py",
          "reference_start_line": 48,
          "reference_end_line": 1095
        }
      ],
      "can_expand": true
    },
    {
      "name": "SystemPromptConstructor",
      "description": "The SystemPromptConstructor is a crucial utility function responsible for dynamically constructing the comprehensive system prompt that guides the `MCPAgent`'s behavior. This involves gathering and formatting tool descriptions, and integrating other contextual information to create an effective and well-structured prompt for the underlying LLM, ensuring the agent has the necessary context to perform its tasks.",
      "referenced_source_code": [
        {
          "qualified_name": "create_system_message",
          "reference_file": "/home/ubuntu/CodeBoarding/repo/mcp-use/mcp_use/agents/prompts/system_prompt_builder.py",
          "reference_start_line": 59,
          "reference_end_line": 103
        }
      ],
      "can_expand": false
    }
  ],
  "components_relations": [
    {
      "relation": "calls",
      "src_name": "MCPAgent",
      "dst_name": "SystemPromptConstructor"
    },
    {
      "relation": "configures with",
      "src_name": "MCPAgent",
      "dst_name": "SystemPromptConstructor"
    }
  ]
}
