{
  "description": "Abstract Components Overview",
  "components": [
    {
      "name": "External Integration Layer",
      "description": "The overarching component responsible for abstracting and managing interactions with external AI frameworks and systems. It acts as the primary interface for `mcp-use` to leverage external functionalities, ensuring loose coupling and adaptability.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.adapters.base.BaseAdapter",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/adapters/base.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_use.adapters.langchain_adapter.LangChainAdapter",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/adapters/langchain_adapter.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        }
      ]
    },
    {
      "name": "Base Adapter",
      "description": "Defines the abstract interface and contract for all external integrations. It establishes the common methods and properties that any concrete adapter must implement, ensuring a consistent approach to integrating diverse external systems. It also orchestrates the lifecycle of connectors.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.adapters.base.BaseAdapter",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/adapters/base.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        }
      ]
    },
    {
      "name": "LangChain Adapter",
      "description": "A concrete implementation of the `BaseAdapter` specifically tailored for integrating with the LangChain framework. It translates `mcp-use`'s internal requests and data structures into LangChain-compatible formats and vice-versa, enabling the use of LangChain's agents, tools, and chains.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.adapters.langchain_adapter.LangChainAdapter",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/adapters/langchain_adapter.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        }
      ]
    },
    {
      "name": "Connector Management Logic",
      "description": "An internal helper component responsible for the initialization, configuration, and lifecycle management of connectors to external systems. It ensures that the necessary connections are established and maintained for adapters to function correctly.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.connectors.base.BaseConnector",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/connectors/base.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_use.connectors.http.HttpConnector",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/connectors/http.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_use.connectors.sandbox.SandboxConnector",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/connectors/sandbox.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_use.connectors.stdio.StdioConnector",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/connectors/stdio.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_use.connectors.websocket.WebSocketConnector",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/connectors/websocket.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_use.session.MCPSession",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/session.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        }
      ]
    },
    {
      "name": "Tool/Resource/Prompt Conversion Helpers",
      "description": "An internal helper component that performs specific data transformations, such as converting `mcp-use`'s internal tool definitions, resources, or prompt templates into formats compatible with external frameworks (e.g., LangChain's tool schema or prompt templates), and vice-versa.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.adapters.langchain_adapter.LangChainAdapter._convert_prompt",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/adapters/langchain_adapter.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_use.adapters.langchain_adapter.LangChainAdapter._convert_resource",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/adapters/langchain_adapter.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        },
        {
          "qualified_name": "mcp_use.adapters.langchain_adapter.LangChainAdapter._convert_tool",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/adapters/langchain_adapter.py",
          "reference_start_line": 0,
          "reference_end_line": 0
        }
      ]
    }
  ],
  "components_relations": [
    {
      "relation": "contains",
      "src_name": "External Integration Layer",
      "dst_name": "Base Adapter"
    },
    {
      "relation": "contains",
      "src_name": "External Integration Layer",
      "dst_name": "LangChain Adapter"
    },
    {
      "relation": "defines the interface for",
      "src_name": "Base Adapter",
      "dst_name": "LangChain Adapter"
    },
    {
      "relation": "orchestrates",
      "src_name": "Base Adapter",
      "dst_name": "Connector Management Logic"
    },
    {
      "relation": "leverages",
      "src_name": "LangChain Adapter",
      "dst_name": "Tool/Resource/Prompt Conversion Helpers"
    }
  ]
}
