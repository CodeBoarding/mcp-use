{
  "description": "mcp-use is a Python library designed for building and orchestrating AI agents, primarily focusing on interaction with MCP servers. Its architecture is centered around the Agent Core, which serves as the central decision-making and execution unit. This core interacts with the Client & Server Connectivity component to manage connections and sessions with various MCP servers. The Tool Abstraction & Management component provides the agent with a unified way to discover and utilize tools exposed by these connected servers, relying on the connectivity layer to retrieve them. Furthermore, an External Integration Layer allows `mcp-use` to seamlessly adapt and integrate with other AI frameworks like LangChain, ensuring broad interoperability for agent development.",
  "components": [
    {
      "name": "Agent Core",
      "description": "The central intelligence and orchestration unit, responsible for the agent's decision-making, lifecycle management, and overall execution flow. It leverages other components to interact with the external environment.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.agents.mcpagent.MCPAgent",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/agents/mcpagent.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        }
      ],
      "can_expand": true
    },
    {
      "name": "Client & Server Connectivity",
      "description": "Manages all aspects of establishing, maintaining, and terminating connections with various MCP servers (e.g., WebSocket, Sandbox). It provides the foundational communication layer and handles session management.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.client.MCPClient",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/client.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        },
        {
          "qualified_name": "mcp_use.session.MCPSession",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/session.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        },
        {
          "qualified_name": "mcp_use.connectors.base.BaseConnector",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/connectors/base.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        },
        {
          "qualified_name": "mcp_use.connectors.sandbox.SandboxConnector",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/connectors/sandbox.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        },
        {
          "qualified_name": "mcp_use.connectors.websocket.WebSocketConnector",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/connectors/websocket.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        },
        {
          "qualified_name": "mcp_use.task_managers.base.ConnectionManager",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/task_managers/base.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        }
      ],
      "can_expand": true
    },
    {
      "name": "Tool Abstraction & Management",
      "description": "Provides a unified interface for agents to discover, list, search, and execute tools exposed by connected MCP servers. It abstracts the complexities of tool interaction and lifecycle.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.managers.tools.disconnect_server.DisconnectServerTool",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/managers/tools/disconnect_server.py",
          "reference_start_line": 15,
          "reference_end_line": 42
        },
        {
          "qualified_name": "mcp_use.managers.tools.get_active_server.GetActiveServerTool",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/managers/tools/get_active_server.py",
          "reference_start_line": 13,
          "reference_end_line": 28
        },
        {
          "qualified_name": "mcp_use.managers.tools.list_servers_tool.ListServersTool",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/managers/tools/list_servers_tool.py",
          "reference_start_line": 15,
          "reference_end_line": 51
        },
        {
          "qualified_name": "mcp_use.managers.tools.search_tools.SearchToolsTool",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/managers/tools/search_tools.py",
          "reference_start_line": 22,
          "reference_end_line": 54
        },
        {
          "qualified_name": "mcp_use.managers.tools.ToolSearchEngine",
          "reference_file": "mcp_use/managers/tools/tool_search_engine.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        },
        {
          "qualified_name": "mcp_use.managers.tools.use_tool.UseToolFromServerTool",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/managers/tools/use_tool.py",
          "reference_start_line": 21,
          "reference_end_line": 153
        }
      ],
      "can_expand": true
    },
    {
      "name": "External Integration Layer",
      "description": "Acts as an adapter, enabling `mcp-use` to seamlessly integrate with and leverage functionalities from external AI frameworks (e.g., LangChain) or other systems by translating interfaces and data structures.",
      "referenced_source_code": [
        {
          "qualified_name": "mcp_use.adapters.base.BaseAdapter",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/adapters/base.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        },
        {
          "qualified_name": "mcp_use.adapters.langchain_adapter.LangChainAdapter",
          "reference_file": "/mnt/e/StartUp/mcp-use/mcp_use/adapters/langchain_adapter.py",
          "reference_start_line": 1,
          "reference_end_line": 1
        }
      ],
      "can_expand": false
    }
  ],
  "components_relations": [
    {
      "relation": "utilizes",
      "src_name": "Agent Core",
      "dst_name": "Client & Server Connectivity"
    },
    {
      "relation": "orchestrates",
      "src_name": "Agent Core",
      "dst_name": "Tool Abstraction & Management"
    },
    {
      "relation": "integrates via",
      "src_name": "Agent Core",
      "dst_name": "External Integration Layer"
    },
    {
      "relation": "retrieves tools from",
      "src_name": "Tool Abstraction & Management",
      "dst_name": "Client & Server Connectivity"
    }
  ]
}
